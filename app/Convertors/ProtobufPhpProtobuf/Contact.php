<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : restaurants.proto
 */


namespace Benchmark\Converters\ProtobufPhpProtobuf;

/**
 * Protobuf message : protobufPhpProtobuf.Contact
 */
class Contact extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * id required int32 = 1
     *
     * @var int
     */
    protected $id = null;

    /**
     * email optional string = 2
     *
     * @var string
     */
    protected $email = null;

    /**
     * web optional string = 3
     *
     * @var string
     */
    protected $web = null;

    /**
     * facebook optional string = 4
     *
     * @var string
     */
    protected $facebook = null;

    /**
     * telephone optional string = 5
     *
     * @var string
     */
    protected $telephone = null;

    /**
     * Check if 'id' has a value
     *
     * @return bool
     */
    public function hasId()
    {
        return $this->id !== null;
    }

    /**
     * Get 'id' value
     *
     * @return int
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Set 'id' value
     *
     * @param int $value
     */
    public function setId($value)
    {
        $this->id = $value;
    }

    /**
     * Check if 'email' has a value
     *
     * @return bool
     */
    public function hasEmail()
    {
        return $this->email !== null;
    }

    /**
     * Get 'email' value
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->email;
    }

    /**
     * Set 'email' value
     *
     * @param string $value
     */
    public function setEmail($value = null)
    {
        $this->email = $value;
    }

    /**
     * Check if 'web' has a value
     *
     * @return bool
     */
    public function hasWeb()
    {
        return $this->web !== null;
    }

    /**
     * Get 'web' value
     *
     * @return string
     */
    public function getWeb()
    {
        return $this->web;
    }

    /**
     * Set 'web' value
     *
     * @param string $value
     */
    public function setWeb($value = null)
    {
        $this->web = $value;
    }

    /**
     * Check if 'facebook' has a value
     *
     * @return bool
     */
    public function hasFacebook()
    {
        return $this->facebook !== null;
    }

    /**
     * Get 'facebook' value
     *
     * @return string
     */
    public function getFacebook()
    {
        return $this->facebook;
    }

    /**
     * Set 'facebook' value
     *
     * @param string $value
     */
    public function setFacebook($value = null)
    {
        $this->facebook = $value;
    }

    /**
     * Check if 'telephone' has a value
     *
     * @return bool
     */
    public function hasTelephone()
    {
        return $this->telephone !== null;
    }

    /**
     * Get 'telephone' value
     *
     * @return string
     */
    public function getTelephone()
    {
        return $this->telephone;
    }

    /**
     * Set 'telephone' value
     *
     * @param string $value
     */
    public function setTelephone($value = null)
    {
        $this->telephone = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        if ( ! isset($values['id'])) {
            throw new \InvalidArgumentException('Field "id" (tag 1) is required but has no value.');
        }

        $message = new self();
        $values  = array_merge([
            'email' => null,
            'web' => null,
            'facebook' => null,
            'telephone' => null
        ], $values);

        $message->setId($values['id']);
        $message->setEmail($values['email']);
        $message->setWeb($values['web']);
        $message->setFacebook($values['facebook']);
        $message->setTelephone($values['telephone']);

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'Contact',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'id',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'email',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'web',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'facebook',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'telephone',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->id === null) {
            throw new \UnexpectedValueException('Field "\\Benchmark\\Converters\\ProtobufPhpProtobuf\\Contact#id" (tag 1) is required but has no value.');
        }

        if ($this->id !== null) {
            $writer->writeVarint($stream, 8);
            $writer->writeVarint($stream, $this->id);
        }

        if ($this->email !== null) {
            $writer->writeVarint($stream, 18);
            $writer->writeString($stream, $this->email);
        }

        if ($this->web !== null) {
            $writer->writeVarint($stream, 26);
            $writer->writeString($stream, $this->web);
        }

        if ($this->facebook !== null) {
            $writer->writeVarint($stream, 34);
            $writer->writeString($stream, $this->facebook);
        }

        if ($this->telephone !== null) {
            $writer->writeVarint($stream, 42);
            $writer->writeString($stream, $this->telephone);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->id = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->email = $reader->readString($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->web = $reader->readString($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->facebook = $reader->readString($stream);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->telephone = $reader->readString($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->id !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->id);
        }

        if ($this->email !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->email);
        }

        if ($this->web !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->web);
        }

        if ($this->facebook !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->facebook);
        }

        if ($this->telephone !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->telephone);
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->id = null;
        $this->email = null;
        $this->web = null;
        $this->facebook = null;
        $this->telephone = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \Benchmark\Converters\ProtobufPhpProtobuf\Contact) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->id = ($message->id !== null) ? $message->id : $this->id;
        $this->email = ($message->email !== null) ? $message->email : $this->email;
        $this->web = ($message->web !== null) ? $message->web : $this->web;
        $this->facebook = ($message->facebook !== null) ? $message->facebook : $this->facebook;
        $this->telephone = ($message->telephone !== null) ? $message->telephone : $this->telephone;
    }


}

