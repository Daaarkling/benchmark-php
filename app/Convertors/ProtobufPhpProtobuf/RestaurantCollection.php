<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : restaurants.proto
 */


namespace Benchmark\Converters\ProtobufPhpProtobuf;

/**
 * Protobuf message : protobufPhpProtobuf.RestaurantCollection
 */
class RestaurantCollection extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * restaurant repeated message = 1
     *
     * @var \Protobuf\Collection<\Benchmark\Converters\ProtobufPhpProtobuf\Restaurant>
     */
    protected $restaurant = null;

    /**
     * error repeated message = 2
     *
     * @var \Protobuf\Collection<\Benchmark\Converters\ProtobufPhpProtobuf\Error>
     */
    protected $error = null;

    /**
     * status required string = 3
     *
     * @var string
     */
    protected $status = null;

    /**
     * code required int32 = 4
     *
     * @var int
     */
    protected $code = null;

    /**
     * totalNumber required int32 = 5
     *
     * @var int
     */
    protected $totalNumber = null;

    /**
     * page optional int32 = 6
     *
     * @var int
     */
    protected $page = null;

    /**
     * pageSize optional int32 = 7
     *
     * @var int
     */
    protected $pageSize = null;

    /**
     * totalPages optional int32 = 8
     *
     * @var int
     */
    protected $totalPages = null;

    /**
     * Check if 'restaurant' has a value
     *
     * @return bool
     */
    public function hasRestaurantList()
    {
        return $this->restaurant !== null;
    }

    /**
     * Get 'restaurant' value
     *
     * @return \Protobuf\Collection<\Benchmark\Converters\ProtobufPhpProtobuf\Restaurant>
     */
    public function getRestaurantList()
    {
        return $this->restaurant;
    }

    /**
     * Set 'restaurant' value
     *
     * @param \Protobuf\Collection<\Benchmark\Converters\ProtobufPhpProtobuf\Restaurant> $value
     */
    public function setRestaurantList(\Protobuf\Collection $value = null)
    {
        $this->restaurant = $value;
    }

    /**
     * Add a new element to 'restaurant'
     *
     * @param \Benchmark\Converters\ProtobufPhpProtobuf\Restaurant $value
     */
    public function addRestaurant(\Benchmark\Converters\ProtobufPhpProtobuf\Restaurant $value)
    {
        if ($this->restaurant === null) {
            $this->restaurant = new \Protobuf\MessageCollection();
        }

        $this->restaurant->add($value);
    }

    /**
     * Check if 'error' has a value
     *
     * @return bool
     */
    public function hasErrorList()
    {
        return $this->error !== null;
    }

    /**
     * Get 'error' value
     *
     * @return \Protobuf\Collection<\Benchmark\Converters\ProtobufPhpProtobuf\Error>
     */
    public function getErrorList()
    {
        return $this->error;
    }

    /**
     * Set 'error' value
     *
     * @param \Protobuf\Collection<\Benchmark\Converters\ProtobufPhpProtobuf\Error> $value
     */
    public function setErrorList(\Protobuf\Collection $value = null)
    {
        $this->error = $value;
    }

    /**
     * Add a new element to 'error'
     *
     * @param \Benchmark\Converters\ProtobufPhpProtobuf\Error $value
     */
    public function addError(\Benchmark\Converters\ProtobufPhpProtobuf\Error $value)
    {
        if ($this->error === null) {
            $this->error = new \Protobuf\MessageCollection();
        }

        $this->error->add($value);
    }

    /**
     * Check if 'status' has a value
     *
     * @return bool
     */
    public function hasStatus()
    {
        return $this->status !== null;
    }

    /**
     * Get 'status' value
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->status;
    }

    /**
     * Set 'status' value
     *
     * @param string $value
     */
    public function setStatus($value)
    {
        $this->status = $value;
    }

    /**
     * Check if 'code' has a value
     *
     * @return bool
     */
    public function hasCode()
    {
        return $this->code !== null;
    }

    /**
     * Get 'code' value
     *
     * @return int
     */
    public function getCode()
    {
        return $this->code;
    }

    /**
     * Set 'code' value
     *
     * @param int $value
     */
    public function setCode($value)
    {
        $this->code = $value;
    }

    /**
     * Check if 'totalNumber' has a value
     *
     * @return bool
     */
    public function hasTotalNumber()
    {
        return $this->totalNumber !== null;
    }

    /**
     * Get 'totalNumber' value
     *
     * @return int
     */
    public function getTotalNumber()
    {
        return $this->totalNumber;
    }

    /**
     * Set 'totalNumber' value
     *
     * @param int $value
     */
    public function setTotalNumber($value)
    {
        $this->totalNumber = $value;
    }

    /**
     * Check if 'page' has a value
     *
     * @return bool
     */
    public function hasPage()
    {
        return $this->page !== null;
    }

    /**
     * Get 'page' value
     *
     * @return int
     */
    public function getPage()
    {
        return $this->page;
    }

    /**
     * Set 'page' value
     *
     * @param int $value
     */
    public function setPage($value = null)
    {
        $this->page = $value;
    }

    /**
     * Check if 'pageSize' has a value
     *
     * @return bool
     */
    public function hasPageSize()
    {
        return $this->pageSize !== null;
    }

    /**
     * Get 'pageSize' value
     *
     * @return int
     */
    public function getPageSize()
    {
        return $this->pageSize;
    }

    /**
     * Set 'pageSize' value
     *
     * @param int $value
     */
    public function setPageSize($value = null)
    {
        $this->pageSize = $value;
    }

    /**
     * Check if 'totalPages' has a value
     *
     * @return bool
     */
    public function hasTotalPages()
    {
        return $this->totalPages !== null;
    }

    /**
     * Get 'totalPages' value
     *
     * @return int
     */
    public function getTotalPages()
    {
        return $this->totalPages;
    }

    /**
     * Set 'totalPages' value
     *
     * @param int $value
     */
    public function setTotalPages($value = null)
    {
        $this->totalPages = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        if ( ! isset($values['status'])) {
            throw new \InvalidArgumentException('Field "status" (tag 3) is required but has no value.');
        }

        if ( ! isset($values['code'])) {
            throw new \InvalidArgumentException('Field "code" (tag 4) is required but has no value.');
        }

        if ( ! isset($values['totalNumber'])) {
            throw new \InvalidArgumentException('Field "totalNumber" (tag 5) is required but has no value.');
        }

        $message = new self();
        $values  = array_merge([
            'restaurant' => [],
            'error' => [],
            'page' => null,
            'pageSize' => null,
            'totalPages' => null
        ], $values);

        $message->setStatus($values['status']);
        $message->setCode($values['code']);
        $message->setTotalNumber($values['totalNumber']);
        $message->setPage($values['page']);
        $message->setPageSize($values['pageSize']);
        $message->setTotalPages($values['totalPages']);

        foreach ($values['restaurant'] as $item) {
            $message->addRestaurant($item);
        }

        foreach ($values['error'] as $item) {
            $message->addError($item);
        }

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'RestaurantCollection',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'restaurant',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.protobufPhpProtobuf.Restaurant'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'error',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.protobufPhpProtobuf.Error'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'status',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'code',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'totalNumber',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'page',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 7,
                    'name' => 'pageSize',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 8,
                    'name' => 'totalPages',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->status === null) {
            throw new \UnexpectedValueException('Field "\\Benchmark\\Converters\\ProtobufPhpProtobuf\\RestaurantCollection#status" (tag 3) is required but has no value.');
        }

        if ($this->code === null) {
            throw new \UnexpectedValueException('Field "\\Benchmark\\Converters\\ProtobufPhpProtobuf\\RestaurantCollection#code" (tag 4) is required but has no value.');
        }

        if ($this->totalNumber === null) {
            throw new \UnexpectedValueException('Field "\\Benchmark\\Converters\\ProtobufPhpProtobuf\\RestaurantCollection#totalNumber" (tag 5) is required but has no value.');
        }

        if ($this->restaurant !== null) {
            foreach ($this->restaurant as $val) {
                $writer->writeVarint($stream, 10);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->error !== null) {
            foreach ($this->error as $val) {
                $writer->writeVarint($stream, 18);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->status !== null) {
            $writer->writeVarint($stream, 26);
            $writer->writeString($stream, $this->status);
        }

        if ($this->code !== null) {
            $writer->writeVarint($stream, 32);
            $writer->writeVarint($stream, $this->code);
        }

        if ($this->totalNumber !== null) {
            $writer->writeVarint($stream, 40);
            $writer->writeVarint($stream, $this->totalNumber);
        }

        if ($this->page !== null) {
            $writer->writeVarint($stream, 48);
            $writer->writeVarint($stream, $this->page);
        }

        if ($this->pageSize !== null) {
            $writer->writeVarint($stream, 56);
            $writer->writeVarint($stream, $this->pageSize);
        }

        if ($this->totalPages !== null) {
            $writer->writeVarint($stream, 64);
            $writer->writeVarint($stream, $this->totalPages);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \Benchmark\Converters\ProtobufPhpProtobuf\Restaurant();

                if ($this->restaurant === null) {
                    $this->restaurant = new \Protobuf\MessageCollection();
                }

                $this->restaurant->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \Benchmark\Converters\ProtobufPhpProtobuf\Error();

                if ($this->error === null) {
                    $this->error = new \Protobuf\MessageCollection();
                }

                $this->error->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->status = $reader->readString($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->code = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->totalNumber = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->page = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 7) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->pageSize = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 8) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->totalPages = $reader->readVarint($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->restaurant !== null) {
            foreach ($this->restaurant as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 1;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->error !== null) {
            foreach ($this->error as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 1;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->status !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->status);
        }

        if ($this->code !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->code);
        }

        if ($this->totalNumber !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->totalNumber);
        }

        if ($this->page !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->page);
        }

        if ($this->pageSize !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->pageSize);
        }

        if ($this->totalPages !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->totalPages);
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->restaurant = null;
        $this->error = null;
        $this->status = null;
        $this->code = null;
        $this->totalNumber = null;
        $this->page = null;
        $this->pageSize = null;
        $this->totalPages = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \Benchmark\Converters\ProtobufPhpProtobuf\RestaurantCollection) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->restaurant = ($message->restaurant !== null) ? $message->restaurant : $this->restaurant;
        $this->error = ($message->error !== null) ? $message->error : $this->error;
        $this->status = ($message->status !== null) ? $message->status : $this->status;
        $this->code = ($message->code !== null) ? $message->code : $this->code;
        $this->totalNumber = ($message->totalNumber !== null) ? $message->totalNumber : $this->totalNumber;
        $this->page = ($message->page !== null) ? $message->page : $this->page;
        $this->pageSize = ($message->pageSize !== null) ? $message->pageSize : $this->pageSize;
        $this->totalPages = ($message->totalPages !== null) ? $message->totalPages : $this->totalPages;
    }


}

