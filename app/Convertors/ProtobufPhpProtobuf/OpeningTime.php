<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : restaurants.proto
 */


namespace Benchmark\Converters\ProtobufPhpProtobuf;

/**
 * Protobuf message : protobufPhpProtobuf.OpeningTime
 */
class OpeningTime extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * id required int32 = 1
     *
     * @var int
     */
    protected $id = null;

    /**
     * restaurant required message = 2
     *
     * @var \Benchmark\Converters\ProtobufPhpProtobuf\Restaurant
     */
    protected $restaurant = null;

    /**
     * day optional string = 3
     *
     * @var string
     */
    protected $day = null;

    /**
     * start optional string = 4
     *
     * @var string
     */
    protected $start = null;

    /**
     * end optional string = 5
     *
     * @var string
     */
    protected $end = null;

    /**
     * Check if 'id' has a value
     *
     * @return bool
     */
    public function hasId()
    {
        return $this->id !== null;
    }

    /**
     * Get 'id' value
     *
     * @return int
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Set 'id' value
     *
     * @param int $value
     */
    public function setId($value)
    {
        $this->id = $value;
    }

    /**
     * Check if 'restaurant' has a value
     *
     * @return bool
     */
    public function hasRestaurant()
    {
        return $this->restaurant !== null;
    }

    /**
     * Get 'restaurant' value
     *
     * @return \Benchmark\Converters\ProtobufPhpProtobuf\Restaurant
     */
    public function getRestaurant()
    {
        return $this->restaurant;
    }

    /**
     * Set 'restaurant' value
     *
     * @param \Benchmark\Converters\ProtobufPhpProtobuf\Restaurant $value
     */
    public function setRestaurant(\Benchmark\Converters\ProtobufPhpProtobuf\Restaurant $value)
    {
        $this->restaurant = $value;
    }

    /**
     * Check if 'day' has a value
     *
     * @return bool
     */
    public function hasDay()
    {
        return $this->day !== null;
    }

    /**
     * Get 'day' value
     *
     * @return string
     */
    public function getDay()
    {
        return $this->day;
    }

    /**
     * Set 'day' value
     *
     * @param string $value
     */
    public function setDay($value = null)
    {
        $this->day = $value;
    }

    /**
     * Check if 'start' has a value
     *
     * @return bool
     */
    public function hasStart()
    {
        return $this->start !== null;
    }

    /**
     * Get 'start' value
     *
     * @return string
     */
    public function getStart()
    {
        return $this->start;
    }

    /**
     * Set 'start' value
     *
     * @param string $value
     */
    public function setStart($value = null)
    {
        $this->start = $value;
    }

    /**
     * Check if 'end' has a value
     *
     * @return bool
     */
    public function hasEnd()
    {
        return $this->end !== null;
    }

    /**
     * Get 'end' value
     *
     * @return string
     */
    public function getEnd()
    {
        return $this->end;
    }

    /**
     * Set 'end' value
     *
     * @param string $value
     */
    public function setEnd($value = null)
    {
        $this->end = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        if ( ! isset($values['id'])) {
            throw new \InvalidArgumentException('Field "id" (tag 1) is required but has no value.');
        }

        if ( ! isset($values['restaurant'])) {
            throw new \InvalidArgumentException('Field "restaurant" (tag 2) is required but has no value.');
        }

        $message = new self();
        $values  = array_merge([
            'day' => null,
            'start' => null,
            'end' => null
        ], $values);

        $message->setId($values['id']);
        $message->setRestaurant($values['restaurant']);
        $message->setDay($values['day']);
        $message->setStart($values['start']);
        $message->setEnd($values['end']);

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'OpeningTime',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'id',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'restaurant',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED(),
                    'type_name' => '.protobufPhpProtobuf.Restaurant'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'day',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'start',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'end',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->id === null) {
            throw new \UnexpectedValueException('Field "\\Benchmark\\Converters\\ProtobufPhpProtobuf\\OpeningTime#id" (tag 1) is required but has no value.');
        }

        if ($this->restaurant === null) {
            throw new \UnexpectedValueException('Field "\\Benchmark\\Converters\\ProtobufPhpProtobuf\\OpeningTime#restaurant" (tag 2) is required but has no value.');
        }

        if ($this->id !== null) {
            $writer->writeVarint($stream, 8);
            $writer->writeVarint($stream, $this->id);
        }

        if ($this->restaurant !== null) {
            $writer->writeVarint($stream, 18);
            $writer->writeVarint($stream, $this->restaurant->serializedSize($sizeContext));
            $this->restaurant->writeTo($context);
        }

        if ($this->day !== null) {
            $writer->writeVarint($stream, 26);
            $writer->writeString($stream, $this->day);
        }

        if ($this->start !== null) {
            $writer->writeVarint($stream, 34);
            $writer->writeString($stream, $this->start);
        }

        if ($this->end !== null) {
            $writer->writeVarint($stream, 42);
            $writer->writeString($stream, $this->end);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->id = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \Benchmark\Converters\ProtobufPhpProtobuf\Restaurant();

                $this->restaurant = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->day = $reader->readString($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->start = $reader->readString($stream);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->end = $reader->readString($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->id !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->id);
        }

        if ($this->restaurant !== null) {
            $innerSize = $this->restaurant->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->day !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->day);
        }

        if ($this->start !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->start);
        }

        if ($this->end !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->end);
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->id = null;
        $this->restaurant = null;
        $this->day = null;
        $this->start = null;
        $this->end = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \Benchmark\Converters\ProtobufPhpProtobuf\OpeningTime) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->id = ($message->id !== null) ? $message->id : $this->id;
        $this->restaurant = ($message->restaurant !== null) ? $message->restaurant : $this->restaurant;
        $this->day = ($message->day !== null) ? $message->day : $this->day;
        $this->start = ($message->start !== null) ? $message->start : $this->start;
        $this->end = ($message->end !== null) ? $message->end : $this->end;
    }


}

