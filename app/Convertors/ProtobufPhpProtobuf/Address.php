<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : restaurants.proto
 */


namespace Benchmark\Converters\ProtobufPhpProtobuf;

/**
 * Protobuf message : protobufPhpProtobuf.Address
 */
class Address extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * id required int32 = 1
     *
     * @var int
     */
    protected $id = null;

    /**
     * latitude optional float = 2
     *
     * @var float
     */
    protected $latitude = null;

    /**
     * longitude optional float = 3
     *
     * @var float
     */
    protected $longitude = null;

    /**
     * street optional string = 4
     *
     * @var string
     */
    protected $street = null;

    /**
     * postal_code optional string = 5
     *
     * @var string
     */
    protected $postal_code = null;

    /**
     * country optional string = 6
     *
     * @var string
     */
    protected $country = null;

    /**
     * locality optional string = 7
     *
     * @var string
     */
    protected $locality = null;

    /**
     * Check if 'id' has a value
     *
     * @return bool
     */
    public function hasId()
    {
        return $this->id !== null;
    }

    /**
     * Get 'id' value
     *
     * @return int
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Set 'id' value
     *
     * @param int $value
     */
    public function setId($value)
    {
        $this->id = $value;
    }

    /**
     * Check if 'latitude' has a value
     *
     * @return bool
     */
    public function hasLatitude()
    {
        return $this->latitude !== null;
    }

    /**
     * Get 'latitude' value
     *
     * @return float
     */
    public function getLatitude()
    {
        return $this->latitude;
    }

    /**
     * Set 'latitude' value
     *
     * @param float $value
     */
    public function setLatitude($value = null)
    {
        $this->latitude = $value;
    }

    /**
     * Check if 'longitude' has a value
     *
     * @return bool
     */
    public function hasLongitude()
    {
        return $this->longitude !== null;
    }

    /**
     * Get 'longitude' value
     *
     * @return float
     */
    public function getLongitude()
    {
        return $this->longitude;
    }

    /**
     * Set 'longitude' value
     *
     * @param float $value
     */
    public function setLongitude($value = null)
    {
        $this->longitude = $value;
    }

    /**
     * Check if 'street' has a value
     *
     * @return bool
     */
    public function hasStreet()
    {
        return $this->street !== null;
    }

    /**
     * Get 'street' value
     *
     * @return string
     */
    public function getStreet()
    {
        return $this->street;
    }

    /**
     * Set 'street' value
     *
     * @param string $value
     */
    public function setStreet($value = null)
    {
        $this->street = $value;
    }

    /**
     * Check if 'postal_code' has a value
     *
     * @return bool
     */
    public function hasPostalCode()
    {
        return $this->postal_code !== null;
    }

    /**
     * Get 'postal_code' value
     *
     * @return string
     */
    public function getPostalCode()
    {
        return $this->postal_code;
    }

    /**
     * Set 'postal_code' value
     *
     * @param string $value
     */
    public function setPostalCode($value = null)
    {
        $this->postal_code = $value;
    }

    /**
     * Check if 'country' has a value
     *
     * @return bool
     */
    public function hasCountry()
    {
        return $this->country !== null;
    }

    /**
     * Get 'country' value
     *
     * @return string
     */
    public function getCountry()
    {
        return $this->country;
    }

    /**
     * Set 'country' value
     *
     * @param string $value
     */
    public function setCountry($value = null)
    {
        $this->country = $value;
    }

    /**
     * Check if 'locality' has a value
     *
     * @return bool
     */
    public function hasLocality()
    {
        return $this->locality !== null;
    }

    /**
     * Get 'locality' value
     *
     * @return string
     */
    public function getLocality()
    {
        return $this->locality;
    }

    /**
     * Set 'locality' value
     *
     * @param string $value
     */
    public function setLocality($value = null)
    {
        $this->locality = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        if ( ! isset($values['id'])) {
            throw new \InvalidArgumentException('Field "id" (tag 1) is required but has no value.');
        }

        $message = new self();
        $values  = array_merge([
            'latitude' => null,
            'longitude' => null,
            'street' => null,
            'postal_code' => null,
            'country' => null,
            'locality' => null
        ], $values);

        $message->setId($values['id']);
        $message->setLatitude($values['latitude']);
        $message->setLongitude($values['longitude']);
        $message->setStreet($values['street']);
        $message->setPostalCode($values['postal_code']);
        $message->setCountry($values['country']);
        $message->setLocality($values['locality']);

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'Address',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'id',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'latitude',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_FLOAT(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'longitude',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_FLOAT(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'street',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'postal_code',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'country',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 7,
                    'name' => 'locality',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->id === null) {
            throw new \UnexpectedValueException('Field "\\Benchmark\\Converters\\ProtobufPhpProtobuf\\Address#id" (tag 1) is required but has no value.');
        }

        if ($this->id !== null) {
            $writer->writeVarint($stream, 8);
            $writer->writeVarint($stream, $this->id);
        }

        if ($this->latitude !== null) {
            $writer->writeVarint($stream, 21);
            $writer->writeFloat($stream, $this->latitude);
        }

        if ($this->longitude !== null) {
            $writer->writeVarint($stream, 29);
            $writer->writeFloat($stream, $this->longitude);
        }

        if ($this->street !== null) {
            $writer->writeVarint($stream, 34);
            $writer->writeString($stream, $this->street);
        }

        if ($this->postal_code !== null) {
            $writer->writeVarint($stream, 42);
            $writer->writeString($stream, $this->postal_code);
        }

        if ($this->country !== null) {
            $writer->writeVarint($stream, 50);
            $writer->writeString($stream, $this->country);
        }

        if ($this->locality !== null) {
            $writer->writeVarint($stream, 58);
            $writer->writeString($stream, $this->locality);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->id = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 2);

                $this->latitude = $reader->readFloat($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 2);

                $this->longitude = $reader->readFloat($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->street = $reader->readString($stream);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->postal_code = $reader->readString($stream);

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->country = $reader->readString($stream);

                continue;
            }

            if ($tag === 7) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->locality = $reader->readString($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->id !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->id);
        }

        if ($this->latitude !== null) {
            $size += 1;
            $size += 4;
        }

        if ($this->longitude !== null) {
            $size += 1;
            $size += 4;
        }

        if ($this->street !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->street);
        }

        if ($this->postal_code !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->postal_code);
        }

        if ($this->country !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->country);
        }

        if ($this->locality !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->locality);
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->id = null;
        $this->latitude = null;
        $this->longitude = null;
        $this->street = null;
        $this->postal_code = null;
        $this->country = null;
        $this->locality = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \Benchmark\Converters\ProtobufPhpProtobuf\Address) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->id = ($message->id !== null) ? $message->id : $this->id;
        $this->latitude = ($message->latitude !== null) ? $message->latitude : $this->latitude;
        $this->longitude = ($message->longitude !== null) ? $message->longitude : $this->longitude;
        $this->street = ($message->street !== null) ? $message->street : $this->street;
        $this->postal_code = ($message->postal_code !== null) ? $message->postal_code : $this->postal_code;
        $this->country = ($message->country !== null) ? $message->country : $this->country;
        $this->locality = ($message->locality !== null) ? $message->locality : $this->locality;
    }


}

